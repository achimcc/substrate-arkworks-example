name: Check Set-Up & Build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:   

  rustfmt:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt

      - uses: actions/checkout@v3

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          command: fmt
          args: --all -- --check   

  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown 
      
      - name: Install protoc
        uses: taiki-e/install-action@v1
        with:
          tool: protoc

      - name: Check Build
        run: |
          cargo build  --release

  clippy:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          components: clippy 

      - name: Install protoc
        uses: taiki-e/install-action@v1
        with:
          tool: protoc     
          
      - name: Cargo clippy
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          command: clippy
          args: --all-targets

  test:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-unknown-unknown
          toolchain: nightly

      - name: Install protoc
        uses: taiki-e/install-action@v1
        with:
          tool: protoc

      - name: Run tests
        run: cargo test --verbose

  bench:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown   

      - name: Install protoc
        uses: taiki-e/install-action@v1
        with:
          tool: protoc  
      
      - name: Build benchmarks
        run: |
          cargo build --package node-template  \
          --profile release \
          --features runtime-benchmarks

      - name: Run benchmarks
        run: |
          ./target/release/node-template benchmark pallet \
              --chain dev \
              --execution=wasm \
              --wasm-execution=compiled \
              --pallet pallet-template \
              --extrinsic "*" \
              --steps 50 \
              --repeat 20 \
              --json \
              > results.json

      - name: install jq
        run: sudo apt-get install jq 

      - name: cat
        run: cat results.json

      - name: jq
        run: jq '.[]' results.json
      
      - name: jq
        run: jq ".[]" results.json

      - name: Generate csv file
        run: cat results.json | jq -r '.[] | ["time", "extrinsic"], ([ .benchmark, ([.time_results[]?.extrinsic_time] | add / length ) ]) | @csv' > results.csv
     
      - name: mkdir benchmark-results
        run: mkdir benchmark-results

      - name: Set Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install csv-to-markdown
        run: |
          sudo npm install --global csv-to-markdown

      - name: Convert csv file to Markdown 
        run: |
          csv-to-markdown results.csv  \
          > benchmark-results/BENCHMARK.MD

      - name: Publish Benchmark results on GitHub Pages
        uses: ftnext/action-push-ghpages@v1.0.0
        with:
          build_dir: benchmark-results
          github_token: ${{ secrets.BENCH_RESULTS_ACCESS_TOKEN }}

  criterion:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown   

      - name: Install protoc
        uses: taiki-e/install-action@v1
        with:
          tool: protoc

      - name: Install cargo-criterion
        run: cargo install cargo-criterion

      - name: Install criterion-table
        run: cargo install criterion-table

      - name: mkdir criterion-results
        run: mkdir criterion-results
      
      - name: Run benchmark
        run: |
          cargo criteion \
          --bench arkworks --message-format json \
          | criterion-table \
          > criterion-results/BENCHMARKS.md

      - name: Publish Benchmark results on GitHub Pages
        uses: ftnext/action-push-ghpages@v1.0.0
        with:
          build_dir: criterion-results
          github_token: ${{ secrets.BENCH_RESULTS_ACCESS_TOKEN }}


     